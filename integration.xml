<?xml version="1.0" encoding="UTF-8"?>

<!--
  - $Id$
  - Author(s): darrelln
  - Copyright (c) 2010, Autonomy Systems Ltd.
  - Description: Ant build script for the Content Parameter API integration tests.
  - Last modified by $Author$ On $Date$
  -->

<project name="Content Parameter API - Integration Tests" default="test" basedir=".">

  <property file="user-build.properties" description="Load external user specific properties." />
  <property file="build.properties" description="Load external properties." />

  <property name="p4.root.dir" location="${basedir}/../../../../../.." />

  <!-- Override junit forkmode so our tests are faster... -->
  <property name="junit.forkmode" value="once" />

  <!-- Import the library and project layout properties... -->
  <import file="${p4.root.dir}/products/buildutils/java/ant/project-layout.xml" />
  <import file="${p4.root.dir}/products/buildutils/java/ant/libraries.xml" />

  <!-- Default compile properties... -->
  <property name="compile.source"   value="1.5" />
  <property name="compile.target"   value="1.5" />
  <property name="compile.encoding" value="UTF-8" />

  <property name="integration.resources.text.pattern"   value="**/*.properties,**/*.xml" />

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- Filters and classpaths...                                                                                     -->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <path id="libs-compile" />

  <path id="libs-runtime" />

  <path id="test-compile-classpath">
    <pathelement location="${target.classes}" />

    <fileset dir="${basedir}/internalLibs" includes="*.jar" />
    <fileset dir="${commons-codec.latest}" includes="*.jar" />
    <fileset dir="${commons-lang.latest}" includes="*.jar" />
    <fileset dir="${jsr-173.dir}" includes="jsr173_1.0_api.jar" />
    <fileset dir="${junit.latest}" includes="junit-dep-*.jar" />
    <fileset dir="${hamcrest.latest}" includes="hamcrest-all-*.jar" />
    <fileset dir="${httpclient.latest}" includes="*.jar" />
    <fileset dir="${httpcore.latest}" includes="*.jar" excludes="httpcore-nio-*.jar" />
    <fileset dir="${slf4j.latest}" includes="jcl-over-slf4j-*.jar" />
    <fileset dir="${slf4j.latest}" includes="slf4j-api-*.jar" />
    <fileset dir="${woodstox.latest}" includes="*.jar" />

    <path refid="libs-compile" />
  </path>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- Targets...                                                                                                    -->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="-create-test-dirs">
    <!-- create the target folder... -->
    <mkdir dir="${target.integration.classes}" />
    <mkdir dir="${target.integration.server}" />
  </target>

  <target name="clean">
    <delete dir="${target.integration}" />
  </target>

  <target name="generate-test-sources" depends="-create-test-dirs" description="generate any test source code for inclusion in compilation.">
    <delete dir="${basedir}/internalLibs" failonerror="true" />
    <ant dir="${p4.products.dir}/api/javautils/testing" inheritAll="false">
      <target name="clean" />
      <target name="package" />
    </ant>
    <copy todir="${basedir}/internalLibs">
      <fileset dir="${p4.products.dir}/api/javautils/testing/${dir.name.target}" includes="*.jar" />
      <fileset dir="${p4.products.dir}/api/javautils/testing/${dir.name.target}/${dir.name.libs}" includes="autonomy-aci-client-api-*.jar" />
      <fileset dir="${p4.products.dir}/api/javautils/testing/${dir.name.target}/${dir.name.libs}" includes="autonomy-common-*.jar" />
      <fileset dir="${p4.products.dir}/api/javautils/testing/${dir.name.target}/${dir.name.libs}" includes="autonomy-nonaci-client-api-*.jar" />
    </copy>
  </target>

  <target name="process-test-resources" depends="generate-test-sources" description="copy and process the resources into the test destination directory.">
    <!-- Copy all text-based resources, currently we don't do any filtering... -->
    <copy todir="${target.integration.classes}" encoding="UTF-8">
      <fileset dir="${src.integration.resources}" includes="${integration.resources.text.pattern}" excludes="**/placeholder.txt" />
    </copy>
  </target>

  <!-- Compile any unit tests... -->
  <target name="test-compile" depends="process-test-resources" description="compile the test source code into the test destination directory.">
    <!-- Compile all the source... -->
    <javac srcdir="${src.integration.java}"
          destdir="${target.integration.classes}"
           source="${compile.source}"
           target="${compile.target}"
         encoding="${compile.encoding}"
            debug="true">
      <classpath refid="test-compile-classpath" />
      <compilerarg value="-Xlint" />
    </javac>
  </target>

  <!-- Run the unit tests... -->
  <target name="test" depends="test-compile" description="run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed.">
    <!-- Empty/or create the reports folder... -->
    <delete dir="${target.integration.reports}" />
    <mkdir dir="${target.integration.reports}" />

    <!-- Run the tests... -->
    <junit fork="true" forkmode="${junit.forkmode}" printsummary="yes" haltonfailure="no" failureproperty="junit.error">
      <!-- Classpath with instrumented classes first... -->
      <classpath location="${target.integration.classes}" />
      <classpath refid="test-compile-classpath" />

      <!-- output XML... -->
      <formatter type="xml" />

      <!-- Test these files... -->
      <batchtest todir="${target.integration.reports}">
        <fileset dir="${src.integration.java}">
          <include name="**/*Test.java" />
          <exclude name="**/*AbstractTest.java" />
        </fileset>
      </batchtest>
    </junit>

    <!-- Generate the reports... -->
    <junitreport todir="${target.integration.reports}">
      <fileset dir="${target.integration.reports}" includes="*.xml" />
      <report format="frames" todir="${target.integration.reports}" />
    </junitreport>

    <fail if="junit.error" message="JUnit test failure." />
  </target>

</project>
